import time
import json
from constraint import Problem
from utils import *

# Caminhos das inst√¢ncias
INSTANCIAS = {
    "F√°cil": "instancias/instancia_facil.json",
    "M√©dia": "instancias/instancia_media.json",
    "Dif√≠cil": "instancias/instancia_dificil.json",
    "Muito Dif√≠cil": "instancias/instancia_muito_dificil.json",
    "Instancia Par√¢metro": "instancias/instancia_parametro.json"
}

def resolver_mapa_com_mrv(variaveis, dominios, vizinhos, restricoes_extras):
    """
    Resolve o problema de colora√ß√£o de mapa usando backtracking com a heur√≠stica MRV.

    A biblioteca 'python-constraint' utiliza a heur√≠stica MRV (Minimum Remaining Values)
    como estrat√©gia padr√£o para a sele√ß√£o de vari√°veis no BacktrackingSolver.
    """
    # 1. Cria√ß√£o do problema e do nosso solver customizado
    problema = Problem(ContadorBacktrackingSolver())

    # 2. Adi√ß√£o de vari√°veis e seus respectivos dom√≠nios
    for var in variaveis:
        problema.addVariable(var, dominios[var])

    # 3. Adi√ß√£o das restri√ß√µes de adjac√™ncia (regi√µes vizinhas n√£o podem ter a mesma cor)
    for regiao, lista_vizinhos in vizinhos.items():
        for vizinho in lista_vizinhos:
            # Adiciona a restri√ß√£o apenas uma vez para cada par (ex: V1-V2 e n√£o V2-V1)
            if regiao < vizinho:
                problema.addConstraint(lambda cor1, cor2: cor1 != cor2, (regiao, vizinho))

    # --- ESSE BLOCO √â PARA AS RESTRI√á√ïES EXTRAS ---
    for restricao in restricoes_extras:
        if restricao["tipo"] =="cardinalidade_max":
            params = restricao["parametros"]
            cor_restringida = params["cor"]
            maximo = params["maximo"]

            # Criamos uma INST√ÇNCIA da nossa nova classe de restri√ß√£o
            constraint_obj = MaxCardinalityConstraint(cor_restringida, maximo)

            # Adiciona a restri√ß√£o ao problema, aplicando-a a TODAS as vari√°veis
            problema.addConstraint(constraint_obj, variaveis)
        elif restricao["tipo"] =="cardinalidade_min":
            params = restricao["parametros"]
            cor_restringida = params["cor"]
            minimo = params["minimo"]
            constraint_obj = MinCardinalityConstraint(cor_restringida, minimo)
            problema.addConstraint(constraint_obj, variaveis)

    # --- FIM DO NOVO BLOCO ---

    # 4. Medi√ß√£o do tempo e execu√ß√£o da busca pela solu√ß√£o
    tempo_inicio = time.time()
    # A biblioteca retorna a primeira solu√ß√£o encontrada
    solucao = problema.getSolution()
    tempo_fim = time.time()

    tempo_execucao = (tempo_fim - tempo_inicio) * 1000

    # 5. Obten√ß√£o das m√©tricas
    # Acessa o solver para obter o n√∫mero de falhas
    num_falhas = problema._solver.get_num_falhas()

    return solucao, tempo_execucao, num_falhas


def executar():
    """
    Fun√ß√£o principal que carrega cada inst√¢ncia, resolve o problema e exibe os resultados.
    """
    for nome, caminho in INSTANCIAS.items():
        print(f"\nüìå ==========================================")
        print(f"üìå Executando inst√¢ncia: {nome}")
        print(f"üìå ==========================================")

        try:
            variaveis, dominios, vizinhos, restricoes = carregar_instancia(caminho)

            print(f"   - Vari√°veis: {len(variaveis)}")
            print(f"   - Vizinhos: {vizinhos}\n")
            print(f"   - Restri√ß√µes Extras: {restricoes}\n")

            # Nota: a vari√°vel de tempo foi renomeada para tempo_ms para clareza
            solucao, tempo_ms, falhas = resolver_mapa_com_mrv(variaveis, dominios, vizinhos, restricoes)

            print("--- Resultados ---")
            if solucao:
                print(f"‚úÖ Solu√ß√£o encontrada:")
                # Imprime a solu√ß√£o de forma organizada
                for var in sorted(solucao.keys()):
                    print(f"   {var}: {solucao[var]}")

                # Chama a fun√ß√£o para criar e salvar a imagem do grafo
                nome_arquivo_mapa = gerar_visualizacao_mapa(vizinhos, solucao, nome)
                print(f"üñºÔ∏è  Visualiza√ß√£o do mapa salva em: '{nome_arquivo_mapa}'")
                # -----------------------------------------

            else:
                print("‚ùå Nenhuma solu√ß√£o encontrada.")

            print(f"‚è±Ô∏è  Tempo de execu√ß√£o: {tempo_ms:.4f} milissegundos.")
            print(f"üìâ Contagem de falhas/retornos: {falhas}.")

        except FileNotFoundError:
            print(f"Erro: Arquivo da inst√¢ncia '{caminho}' n√£o encontrado.")
        except Exception as e:
            print(f"Ocorreu um erro ao processar a inst√¢ncia {nome}: {e}")


if __name__ == "__main__":
    executar()

